:grammar:
<програма>::=<блок змінних>{<список операторів>}
<блок змінних>::=<ініціалізація змінних>\n<блок змінних>|<ініціалізація змінних>\n
<ініціалізація змінних>::=<тип><список змінних>
<тип>::=int|double|bool
<список змінних>::=<ініціалізація змінної>,<список змінних>|<ініціалізація змінної>
<ініціалізація змінної>::=IDN =<арифметичний вираз>|IDN|IDN =<відношення>
<блок операторів>::=<оператор>\n|<оператор>\n<блок операторів>
<оператор>::=<цикл>|<умовний перехід>|<оператор вводу>|<оператор виводу>|<оператор присвоєння>|<мітка>
<відношення>::=<арифметичний вираз><знак відношення><арифметичний вираз>
<знак відношення>::=>|<|>=|<=|!=|==
<арифметичнй вираз>::=<добуток>|<арифметичний вираз>+<добуток>|<арифметичний вираз>-<добуток>
<добуток>::=<вираз у дужках>|<добуток>*<вираз у дужках>|<добуток>/<вираз у дужках>
<вираз у дужках>::=(<арифметичний вираз>)|<CON|IDN
<цикл>::= for IDN = <арифметичний вираз> to <арифметичний вираз> by <арифметичний вираз> while (<відношення>) {<блок операторів>}
<умовний перехід>::=if <відношення> then {<блок операторів>}|if <відношення> then {<блок операторів>} else {<блок операторів>}
<оператор вводу>::= cin <аргументи оператора вводу>
<аргументи оператора вводу>::= << IDN| << IDN <аргументи оператора вводу>
<вираз>::=<арифметичний вираз>|<відношення>|IDN
<оператор вводу>::= cout <аргументи оператора вводу>
<аргументи оператора вводу>::= >> <вираз>|>> <вираз> <аргументи оператора вводу>
<оператор присвоєння>::= IDN = <вираз>
<мітка>::=POINTER|POINTER :
:types:
int
double
bool
:regex:
IDN;;=^[a-zA-Z_][a-zA-Z0-9_]*$
CON;;=^([1-9][0-9]*|0)?\.[0-9]+$|^[1-9][0-9]*$|^0$
POINTER;;=^#[a-zA-Z0-9_]+$
