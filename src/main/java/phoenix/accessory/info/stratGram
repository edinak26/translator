:grammar:
<програма>::=<бз> { <блок операторів1>}
<блок змінних>::=<ініціалізація змінних>\n<блок змінних>|<ініціалізація змінних>\n
<бз>::=<блок змінних>
<ініціалізація змінних>::=<тип><список змінних>
<тип>::=int|double|bool
<список змінних>::=<ініціалізація змінної>,<список змінних>|<ініціалізація змінної>
<ініціалізація змінної>::= IDN = <аф>|IDN = <відн>
<блок операторів>::=<оператор>\n|<бо2>
<бо2>::=<оператор>\n<блок операторів>
<бо>::=<бо2>
<блок операторів1>::=<блок операторів>
<оператор>::=<цикл>|<умовний перехід>|<оператор вводу>|<оператор виводу>|<оператор присвоєння>|<мітка>
<відношення>::=<арифметичний вираз><знак відношення><аф>
<відн>::=<відношення>
<знак відношення>::=>|<|>=|<=|!=|==
<арифметичний вираз>::=<дб>|<арифметичний вираз>+<дб>|<арифметичний вираз>-<дб>
<аф>::=<арифметичний вираз>
<аф1>::=<аф>
<добуток>::=<вираз у дужках>|<добуток>*<вираз у дужках>|<добуток>/<вираз у дужках>
<дб>::=<добуток>
<вираз у дужках>::=(<аф1>)|CON|IDN
<цикл>::= for IDN = <аф> to <аф> by <аф> while (<відношення>) {<бо>}
<умовний перехід>::=if <відношення> then {<бо>}|if <відношення> then {<бо>} else {<бо>}
<оператор вводу>::= cin <аргументи оператора вводу>
<аргументи оператора вводу>::= << IDN| << IDN <аргументи оператора вводу>
<вираз>::=<арифметичний вираз>|<відношення>|IDN
<оператор виводу>::= cout <аргументи оператора виводу>
<аргументи оператора виводу>::= <вираз оператора виводу>|<вираз оператора виводу> <аргументи оператора виводу>
<вираз оператора виводу>::=>> <аф>|>> <відношення>
<оператор присвоєння>::= IDN = <вираз>
<мітка>::=POINTER|POINTER :
:types:
IDN:;=int|double|bool
:regex:
IDN;;=^[a-zA-Z_][a-zA-Z0-9_]*$
CON;;=^([1-9][0-9]*|0)?\.[0-9]+$|^[1-9][0-9]*$|^0$
POINTER;;=^#[a-zA-Z0-9_]+$
