:grammar:
    <програма>::=<бз> { <блок операторів1> }|<програма>\n

<:Блок инициализации:>

    <блок змінних>::=<ініціалізація змінних>\n<блок змінних>|<ініціалізація змінних>\n
    <бз>::=<блок змінних>
    <ініціалізація змінних>::=<тип><список змінних>
    <тип>::=int|double|bool
    <список змінних>::=<оператор присвоєння>,<список змінних>|<оператор присвоєння>,
    <ідентифікатор>::=IDN

<;Блок инициализации;>

<:Блок операторов:>

    <блок операторів>::=<оператор>\n|<бо2>
    <бо2>::=<оператор>\n<блок операторів>
    <бо>::=<бо2>
    <блок операторів1>::=<блок операторів>
    <оператор>::=<цикл>|<умовний перехід>|<оператор вводу>|<оператор виводу>|<оператор присвоєння>|<мітка>
    <відношення>::=<арифметичний вираз><знак відношення><аф>
    <відн>::=<відношення>
    <знак відношення>::=>|<|>=|<=|!=|==
    <арифметичний вираз>::=<дб>|<арифметичний вираз>+<дб>|<арифметичний вираз>-<дб>
    <аф>::=<арифметичний вираз>
    <аф1>::=<аф>
    <добуток>::=<вираз у дужках>|<добуток>*<вираз у дужках>|<добуток>/<вираз у дужках>
    <дб>::=<добуток>
    <вираз у дужках>::=(<аф1>)|CON|<ідентифікатор>
    <цикл>::= for IDN = <аф> to <аф> by <аф> while (<відношення>) {<блок операторів1>}
    <умовний перехід>::=if <відношення> then {<блок операторів1>}|if <відношення> then {<блок операторів1>} else {<блок операторів1>}
    <оператор вводу>::= cin <аргументи оператора вводу>
    <аргументи оператора вводу>::= << IDN| << IDN <аргументи оператора вводу>
    <вираз>::=<арифметичний вираз>|<відношення>|IDN
    <оператор виводу>::= cout <аргументи оператора виводу>
    <аргументи оператора виводу>::= <вираз оператора виводу>|<вираз оператора виводу> <аргументи оператора виводу>
    <вираз оператора виводу>::=>> <аф>|>> <відношення>
    <оператор присвоєння>::= IDN = <аф>|IDN = <відн>
    <мітка>::=POINTER|POINTER :

<;Блок операторов;>

:types:
    IDN:;=int|double|bool

:regex:
    IDN;;=^[a-zA-Z_][a-zA-Z0-9_]*$
    CON;;=^([1-9][0-9]*|0)?\.[0-9]+$|^[1-9][0-9]*$|^0$
    POINTER;;=^#[a-zA-Z0-9_]+$
